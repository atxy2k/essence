<?php namespace Atxy2k\Essence\Infraestructure;
/**
 * Created by PhpStorm.
 * User: atxy2k
 * Date: 11/2/2019
 * Time: 15:19
 */
use Atxy2k\Essence\Infraestructure\Validator;
use Illuminate\Support\MessageBag;

class Service
{
    /** @var Validator */
    protected $validator;
    protected ?MessageBag $errors = null;

    /**
     * Service constructor.
     */
    public function __construct()
    {
        $this->errors = new MessageBag();
    }

    /**
     * Return errors generated by validator or the code
     * @return MessageBag
     */
    public function errors() : MessageBag
    {
        if($this->validator!==null && $this->validator->errors()->isEmpty()) return $this->errors;
        else
        {
            if($this->validator!==null)
                return $this->errors->merge( $this->validator->errors() );
            else
                return $this->errors;
        }
    }

    /**
     * Return rules of validator in key position.
     * @param string|null $key
     * @return array
     */
    public function rules(string $key = null) : array
    {
        return $this->validator->getRules($key);
    }

    /**
     * Add a MessageBag object to errors for some reason
     * @param MessageBag $errors
     * @return Service
     */
    public function pushErrors(MessageBag $errors) : Service
    {
        $this->errors->merge($errors);
        return $this;
    }

    /**
     * Add a MessageBag object to errors for some reason.
     * @param MessageBag $errors
     * @return Service
     */
    public function putErrors(MessageBag $errors) : Service
    {
        $this->errors->merge($errors);
        return $this;
    }

    /**
     * Add a message to errors with key called "error" by default.
     * @param string $message
     * @param string $key
     * @return Service
     */
    public function pushError(string $message, string $key = 'error') : Service
    {
        $this->errors->add($key, $message);
        return $this;
    }

    /**
     * Add a message to errors with key called "error" by default.
     * @param string $message
     * @param string $key
     * @return Service
     */
    public function putError(string $message, string $key = 'error') : Service
    {
        $this->errors->add($key, $message);
        return $this;
    }

    /**
     * Clean all errors
     * @return Service
     */
    public function clearErrors() : Service
    {
        $this->errors = new MessageBag();
        return $this;
    }

    /**
     * Clean all errors
     * @return Service
     */
    public function cleanErrors() : Service
    {
        $this->errors = new MessageBag();
        return $this;
    }

    /**
     * Return a number of generated errors.
     * @return int
     */
    public function countErrors() : int
    {
        return $this->errors()->count();
    }

}
